## valid uuid = 8f4b7b9c-3f7a-4b6c-8b0c-1c9c5b8b9b6a

### 
# @name createCategory
POST http://localhost:3000/categories
Content-Type: application/json

{
    "name": "Category 1",
    "description": "Description 1"
}

###

@categoryId = {{createCategory.response.body.data.id}}

###
GET http://localhost:3000/categories

###
GET http://localhost:3000/categories/8f4b7b9c-3f7a-4b6c-8b0c-1c9c5b8b9b6a


### 
# @name createGenre
POST http://localhost:3000/genres
Content-Type: application/json

{
    "name": "Genre 1",
    "categories_id": [
        "{{categoryId}}"
    ]
}

###

@genreId = {{createGenre.response.body.data.id}}

###

# @name createCastMember
POST http://localhost:3000/cast-members
Content-Type: application/json

{
    "name": "Cast Member 1",
    "type": 1
}

###

@castMemberId = {{createCastMember.response.body.data.id}}


###
# @name createVideo
POST http://localhost:3000/videos
Content-Type: application/json

{
    "title": "Video 1",
    "description": "Description 1",
    "year_launched": 2020,
    "is_opened": false,
    "rating": "L",
    "duration": 90,
    "categories_id": [
        "{{categoryId}}"
    ],
    "genres_id": [
        "{{genreId}}"
    ],
    "cast_members_id": [
        "{{castMemberId}}"
    ]
}

###

@videoId = {{createVideo.response.body.data.id}}

###

GET http://localhost:3000/videos/{{videoId}}


###
# @name updateVideo
PATCH http://localhost:3000/videos/{{videoId}}
Content-Type: application/json

{
    "title": "Video 1aaaa",
    "description": "Description 1aaaa",
    "year_launched": 2021,
    "is_opened": false,
    "rating": "L",
    "duration": 90,
    "categories_id": [
        "{{categoryId}}"
    ],
    "genres_id": [
        "{{genreId}}"
    ],
    "cast_members_id": [
        "{{castMemberId}}"
    ]
}

###

###
# @name uploadVideo
PATCH http://localhost:3000/videos/{{videoId}}
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary1234

------WebKitFormBoundary1234
Content-Disposition: form-data; name="video"; filename="video.mp4"
Content-Type: video/mp4

< ./package.json
------WebKitFormBoundary1234--


###
GET http://localhost:3000/fake-event

###
GET http://localhost:3000/rabbitmq-fake

###

### Estou usando host.docker.internal, porque no momento o dev container com rest client está fazendo requisição de dentro do container, 
### então por localhost:8080 não funciona, mas se estiver usando o rest client fora do container, pode usar localhost:8080
POST http://host.docker.internal:8080/realms/codeflix/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

username=admin@user.com
&password=secret
&grant_type=password
&client_id=codeflix-admin-frontend

### configuração do openid connect server
GET http://host.docker.internal:8080/realms/codeflix/.well-known/openid-configuration

### certificados
GET http://host.docker.internal:8080/realms/codeflix/protocol/openid-connect/certs

###
POST http://localhost:3000/auth
Content-Type: application/json

{
    "email": "admin@user.com",
    "password": "123456"
}

###
GET http://localhost:3000/auth
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRamZBOUpZbVc2OExHS0dUS3dmV0xXdWtrSGFYUWRyMUlVNTN2OEtpazZNIn0.eyJleHAiOjE3MDI0NjY5MDksImlhdCI6MTcwMjQ2NjYwOSwianRpIjoiOTI0ZjFlNmUtODI0NS00ZjRjLWI2Y2MtMDRlNjhiNDMzOWY2IiwiaXNzIjoiaHR0cDovL2hvc3QuZG9ja2VyLmludGVybmFsOjgwODAvcmVhbG1zL2NvZGVmbGl4IiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjA5MGI3ZTQwLWZmOGUtNDA2ZC1iNDM2LTA5ZTZhZWM4MTQyYSIsInR5cCI6IkJlYXJlciIsImF6cCI6ImNvZGVmbGl4LWFkbWluLWZyb250ZW5kIiwic2Vzc2lvbl9zdGF0ZSI6IjQ2NTYwNmZjLTZhMTgtNDVmNy05MmMwLTgzYTVmNWIwZWFkMyIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiLyoiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJkZWZhdWx0LXJvbGVzLWNvZGVmbGl4Il19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIiwic2lkIjoiNDY1NjA2ZmMtNmExOC00NWY3LTkyYzAtODNhNWY1YjBlYWQzIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsIm5hbWUiOiJBZG1pbiBBZG1pbiIsInByZWZlcnJlZF91c2VybmFtZSI6ImFkbWluQHVzZXIuY29tIiwiZ2l2ZW5fbmFtZSI6IkFkbWluIiwiZmFtaWx5X25hbWUiOiJBZG1pbiIsImVtYWlsIjoiYWRtaW5AdXNlci5jb20ifQ.IFjqdzLhmJNsA8hj4JABs_L54xIb_OJeO5vKsdfLIOyzMvNBkQc7Aw1D_qRlFAzroSFFLh9cIgkybECE-My11ixaPU7oJXeWXDP4euQd51wB_MAunFAxCrDIuv6x0_WHdkpnJoZyBFNvWWV_XrGpr9cbqNPcEkvbT-BMBAVNq_Isoz60ftqJFeGVc6ktCfNHtxbWiGoISY34PtMlgvx2SuVuuVEN8yWUuBPPReb978_aNfWCa_QqnpAREdsf_2FnGRtg8x25AXFZQaUNh4PwMODL8LGZRDxt37YJV8_JbXXO1Gg2QliiSYr3wete0V5NxjgCSL1DCR_KmAjiR2KuaA